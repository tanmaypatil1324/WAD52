https://github.com/tanmaypatil1324/TEST.git
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

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git
$ git clone https://github.com/tanmaypatil1324/TEST.git
Cloning into 'TEST'...
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 12 (delta 0), reused 3 (delta 0), pack-reused 0
Receiving objects: 100% (12/12), done.

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git
$ cd TEST/

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   two

no changes added to commit (use "git add" and/or "git commit -a")

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git add *

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   two


Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git commit -m "tested"
[main f700244] tested
 1 file changed, 1 insertion(+), 1 deletion(-)

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git remote set-url origin https://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@github.com/tanmaypatil1324/TEST

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git push origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 12 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 288 bytes | 288.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/tanmaypatil1324/TEST
   06decc8..f700244  main -> main

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git commit -m "tested"^C

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git pull origin
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 672 bytes | 42.00 KiB/s, done.
From https://github.com/tanmaypatil1324/TEST
   f700244..524534c  main       -> origin/main
Updating f700244..524534c
Fast-forward
 tst | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 tst

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean

Lenovo@LAPTOP-EB8DNP23 MINGW64 ~/OneDrive/Desktop/Git/TEST (main)
$ git pull origin
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 680 bytes | 48.00 KiB/s, done.
From https://github.com/tanmaypatil1324/TEST
   524534c..7b28a43  main       -> origin/main
Updating 524534c..7b28a43
Fast-forward
 tst | 1 +
 1 file changed, 1 insertion(+)

Git Branch:

In Git, a branch is a new/separate version of the main repository.

Let's say you have a large project, and you need to update the design on it.

How would that work without and with Git:

Without Git:

Make copies of all the relevant files to avoid impacting the live version
Start working with the design and find that code depend on code in other files, that also need to be changed!
Make copies of the dependant files as well. Making sure that every file dependency references the correct file name
EMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!
Save all your files, making a note of the names of the copies you were working on
Work on the unrelated error and update the code to fix it
Go back to the design, and finish the work there
Copy the code or rename the files, so the updated design is on the live version
(2 weeks later, you realize that the unrelated error was not fixed in the new design version because you copied the files before the fix)
With Git:

With a new branch called new-design, edit the code directly without impacting the main branch
EMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!
Create a new branch from the main project called small-error-fix
Fix the unrelated error and merge the small-error-fix branch with the main branch
You go back to the new-design branch, and finish the work there
Merge the new-design branch with main (getting alerted to the small error fix that you were missing)
Branches allow you to work on different parts of a project without impacting the main branch.

When the work is complete, a branch can be merged with the main project.

You can even switch between branches and work on different projects without them interfering with each other.

Branching in Git is very lightweight and fast!


